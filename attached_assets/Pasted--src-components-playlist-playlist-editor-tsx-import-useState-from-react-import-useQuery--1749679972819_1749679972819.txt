// src/components/playlist/playlist-editor.tsx

import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { GripVertical, Image, Video, FileText, Globe, Type, Trash2, Plus, Settings } from "lucide-react";

export function PlaylistEditor({ playlistId }: { playlistId: number | null }) {
  const { toast } = useToast();

  const { data: playlistData, isLoading } = useQuery({
    queryKey: ["/api/playlists", playlistId],
    queryFn: async () => {
      if (!playlistId) return null;
      const response = await apiRequest(`/api/playlists/${playlistId}`);
      return response.json();
    },
    enabled: !!playlistId,
  });

  const updateItemMutation = useMutation({
    mutationFn: async ({ id, customDuration }: { id: number; customDuration: number }) => {
      await apiRequest(`/api/playlist-items/${id}`, {
        method: "PUT",
        body: JSON.stringify({ customDuration })
      });
    },
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["/api/playlists", playlistId] }),
  });

  const deleteItemMutation = useMutation({
    mutationFn: async (id: number) => {
      await apiRequest(`/api/playlist-items/${id}`, { method: "DELETE" });
    },
    onSuccess: () => {
      toast({ title: "Elemento eliminado" });
      queryClient.invalidateQueries({ queryKey: ["/api/playlists", playlistId] });
    },
  });

  const reorderMutation = useMutation({
    mutationFn: async (itemOrders: { id: number; order: number }[]) => {
      await apiRequest(`/api/playlists/${playlistId}/reorder`, {
        method: "PUT",
        body: JSON.stringify({ itemOrders })
      });
    },
    onSuccess: () => queryClient.invalidateQueries({ queryKey: ["/api/playlists", playlistId] }),
  });

  const handleDragEnd = (result: any) => {
    if (!result.destination || !playlistData?.items) return;
    
    const items = Array.from(playlistData.items);
    const [reorderedItem] = items.splice(result.source.index, 1);
    items.splice(result.destination.index, 0, reorderedItem);

    const itemOrders = items.map((item, index) => ({ id: item.id, order: index }));
    reorderMutation.mutate(itemOrders);
  };

  const handleDurationChange = (itemId: number, duration: string) => {
    const customDuration = parseInt(duration) || 0;
    if (customDuration > 0) {
      updateItemMutation.mutate({ id: itemId, customDuration });
    }
  };
  
  const getContentIcon = (type: string) => {
    // ... (función auxiliar para obtener íconos)
  };
  
  if (!playlistId) {
    return (
      <Card className="flex items-center justify-center h-full">
        <div className="text-center text-slate-500">
          <List className="mx-auto h-12 w-12 opacity-50 mb-4" />
          <p>Selecciona una playlist para comenzar a editar.</p>
        </div>
      </Card>
    );
  }

  if (isLoading) return <div>Cargando playlist...</div>;

  return (
    <Card>
      <CardHeader>
        <CardTitle>{playlistData?.name}</CardTitle>
      </CardHeader>
      <CardContent>
        <DragDropContext onDragEnd={handleDragEnd}>
          <Droppable droppableId="playlist-items">
            {(provided) => (
              <div {...provided.droppableProps} ref={provided.innerRef} className="space-y-3">
                {playlistData?.items?.map((item: any, index: number) => (
                  <Draggable key={item.id} draggableId={item.id.toString()} index={index}>
                    {(provided) => (
                      <div
                        ref={provided.innerRef}
                        {...provided.draggableProps}
                        className="flex items-center p-3 bg-slate-50 rounded-lg border"
                      >
                        <div {...provided.dragHandleProps} className="cursor-grab p-2">
                          <GripVertical className="w-5 h-5 text-slate-400" />
                        </div>
                        {/* ... Resto de la UI del item ... */}
                        <div className="flex-1">
                          <p className="font-medium">{item.contentItem.title}</p>
                          <Badge variant="outline">{item.contentItem.type}</Badge>
                        </div>
                        <div className="flex items-center gap-2">
                          <Input
                            type="number"
                            className="w-20"
                            placeholder="Seg."
                            defaultValue={item.customDuration || item.contentItem.duration}
                            onBlur={(e) => handleDurationChange(item.id, e.target.value)}
                          />
                          <Button variant="ghost" size="icon" onClick={() => deleteItemMutation.mutate(item.id)}>
                            <Trash2 className="w-4 h-4 text-red-500" />
                          </Button>
                        </div>
                      </div>
                    )}
                  </Draggable>
                ))}
                {provided.placeholder}
              </div>
            )}
          </Droppable>
        </DragDropContext>
      </CardContent>
    </Card>
  );
}