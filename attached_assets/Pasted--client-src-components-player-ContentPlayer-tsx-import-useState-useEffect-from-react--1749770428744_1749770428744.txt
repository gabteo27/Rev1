// client/src/components/player/ContentPlayer.tsx

import { useState, useEffect } from 'react';
// ...otros imports

// --- Estilos y Componentes de Renderizado ---
const styles = {
  container: { /* ... */ } as React.CSSProperties,
  media: { /* ... */ } as React.CSSProperties,
};

// --- Componentes existentes ---
const ImagePlayer = ({ src }: { src: string }) => <img key={src} src={src} style={styles.media} alt="Contenido Digital" />;
const VideoPlayer = ({ src }: { src:string }) => <video key={src} src={src} style={styles.media} autoPlay muted loop playsInline />;

// --- NUEVO COMPONENTE PARA YOUTUBE ---
const YouTubePlayer = ({ url }: { url: string }) => {
  // Extraemos el ID del video de la URL de YouTube
  const getYouTubeID = (url: string) => {
    const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
    const match = url.match(regExp);
    return (match && match[2].length === 11) ? match[2] : null;
  };

  const videoId = getYouTubeID(url);

  if (!videoId) {
    return <div style={styles.message}>URL de YouTube no válida</div>;
  }

  // Construimos la URL de "embed" con los parámetros para autoplay en modo quiosco
  const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1&loop=1&playlist=${videoId}&controls=0&showinfo=0&iv_load_policy=3&modestbranding=1`;

  return (
    <iframe
      key={embedUrl}
      src={embedUrl}
      style={{ ...styles.media, border: 'none' }}
      title="YouTube video player"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
      allowFullScreen
    ></iframe>
  );
};

// ... El resto de tu lógica de ContentPlayer ...

// --- Lógica de renderizado MODIFICADA ---
const renderContent = () => {
  const currentItem = playlist.items[currentItemIndex]?.contentItem;
  if (!currentItem) return null;
  
  const { type, url } = currentItem;

  // Detectamos si es una URL de YouTube
  if (type === 'webpage' && (url.includes('youtube.com') || url.includes('youtu.be'))) {
    return <YouTubePlayer url={url} />;
  }

  // Lógica existente para otros tipos
  switch (type) {
    case 'image': return <ImagePlayer src={url} />;
    case 'video': return <VideoPlayer src={url} />;
    case 'webpage': return <WebpagePlayer src={url} />;
    // ... otros casos
    default: return <div>Tipo de contenido no soportado: {type}</div>;
  }
};

// ...